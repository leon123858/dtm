# GraphQL schema example
#
# https://gqlgen.com/getting-started/

enum RecordCategory {
	"""
	average
	"""
	NORMAL
	"""
	set fix amount list
	"""
	FIX
	"""
	set Part to split
	"""
	PART
	"""
	after set fix money choose some address average split last money, use plus mean should engage average sharing
	"""
	FIX_BEFORE_NORMAL
}

type Record {
	id: ID!
	name: String!
	amount: Float!
	prePayAddress: String!
	"""
	time: by JS Date().getTime().toString()
	"""
	time: String!
	shouldPayAddress: [String!]!
	extendPayMsg: [Float!]!
	category: RecordCategory!
	isValid: Boolean!
}

type Payment {
	amount: Float!
	address: String!
}

type Tx {
	input: [Payment!]!
	output: Payment!
}

type Trip {
	id: ID!
	name: String!
	records: [Record!]!
	moneyShare: [Tx!]!
	addressList: [String!]!
	isValid: Boolean!
}

type Subscription {
	subRecordCreate(tripId: ID!): Record!
	subRecordDelete(tripId: ID!): ID!
	subRecordUpdate(tripId: ID!): Record!
	subAddressCreate(tripId: ID!): String!
	subAddressDelete(tripId: ID!): String!
}

type Query {
	trip(tripId: ID!): Trip
}

input NewRecord {
	name: String!
	amount: Float!
	prePayAddress: String!
	"""
	time: by JS Date().getTime().toString()
	"""
	time: String
	shouldPayAddress: [String!]!
	extendPayMsg: [Float!]
	category: RecordCategory
}

input NewTrip {
	name: String!
}

type Mutation {
	createTrip(input: NewTrip!): Trip!
	updateTrip(tripId: ID!, input: NewTrip!): Trip!
	createRecord(tripId: ID!, input: NewRecord!): Record!
	updateRecord(recordId: ID!, input: NewRecord!): Record!
	removeRecord(recordId: ID!): ID!
	createAddress(tripId: ID!, address: String!): String!
	deleteAddress(tripId: ID!, address: String!): String!
}
