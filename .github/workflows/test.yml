name: CI Pipeline

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch:

jobs:
  # ===================================================================
  # Job 1: 編譯與單元測試 (Unit Test)
  # 職責：編譯、執行單元測試、打包執行檔產物
  # ===================================================================
  unit-test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: 'host=localhost user=postgres dbname=postgres port=5432 sslmode=disable TimeZone=Asia/Taipei'
      RABBITMQ_URL: 'amqp://guest:guest@localhost:5672/'

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      rabbitmq:
        image: rabbitmq:3
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Build Go application
        run: make build

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-app-executable
          path: ./bin/app

      - name: Run Database Migration
        run: go run dtm.go migrate -u migrate postgres database

      - name: Run Unit Tests
        run: go test -v ./...

  # ===================================================================
  # Job 2: 端對端測試 (E2E Test)
  # 職責：使用不同參數執行後端，並運行 E2E 測試
  # ===================================================================
  e2e-test:
    needs: unit-test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false # 即使其中一個測試失敗，也繼續執行完其他的測試
      matrix:
        # 定義後端應用程式的啟動命令
        start_command:
          - 'serve'
          - 'serve --dev=false'

    env:
      DATABASE_URL: 'host=localhost user=postgres dbname=postgres port=5432 sslmode=disable TimeZone=Asia/Taipei'
      RABBITMQ_URL: 'amqp://guest:guest@localhost:5672/'

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      rabbitmq:
        image: rabbitmq:3
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download executable artifact
        uses: actions/download-artifact@v4
        with:
          name: my-app-executable

      - name: Make executable
        run: chmod +x my-app-executable

      - name: Run Database Migration
        run: go run dtm.go migrate -u migrate postgres database

      - name: Install Node.js dependencies
        run: cd e2e && yarn

      - name: Run Go application in background
        run: ./my-app-executable ${{ matrix.start_command }} &

      - name: Run E2E tests
        run: make testE2E
